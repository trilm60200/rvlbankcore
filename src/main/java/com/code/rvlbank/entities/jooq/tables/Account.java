/*
 * This file is generated by jOOQ.
 */
package com.code.rvlbank.entities.jooq.tables;


import com.code.rvlbank.entities.jooq.DefaultSchema;
import com.code.rvlbank.entities.jooq.Indexes;
import com.code.rvlbank.entities.jooq.Keys;
import com.code.rvlbank.entities.jooq.tables.records.AccountRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.5"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Account extends TableImpl<AccountRecord> {

    private static final long serialVersionUID = -1897860300;

    /**
     * The reference instance of <code>ACCOUNT</code>
     */
    public static final Account ACCOUNT = new Account();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AccountRecord> getRecordType() {
        return AccountRecord.class;
    }

    /**
     * The column <code>ACCOUNT.ID</code>.
     */
    public final TableField<AccountRecord, Long> ID = createField("ID", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>ACCOUNT.ACCOUNT_REF</code>.
     */
    public final TableField<AccountRecord, String> ACCOUNT_REF = createField("ACCOUNT_REF", org.jooq.impl.SQLDataType.CLOB.defaultValue(DSL.field("FALSE", org.jooq.impl.SQLDataType.CLOB)), this, "");

    /**
     * The column <code>ACCOUNT.LOCKED</code>.
     */
    public final TableField<AccountRecord, Boolean> LOCKED = createField("LOCKED", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(DSL.field("FALSE", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>ACCOUNT.BALANCE</code>.
     */
    public final TableField<AccountRecord, BigDecimal> BALANCE = createField("BALANCE", org.jooq.impl.SQLDataType.DECIMAL(19, 4).defaultValue(DSL.field("0", org.jooq.impl.SQLDataType.DECIMAL)), this, "");

    /**
     * The column <code>ACCOUNT.CURRENCY</code>.
     */
    public final TableField<AccountRecord, String> CURRENCY = createField("CURRENCY", org.jooq.impl.SQLDataType.VARCHAR(10).defaultValue(DSL.field("'EUR'", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>ACCOUNT.IS_ACTIVE</code>.
     */
    public final TableField<AccountRecord, Boolean> IS_ACTIVE = createField("IS_ACTIVE", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(DSL.field("TRUE", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>ACCOUNT</code> table reference
     */
    public Account() {
        this(DSL.name("ACCOUNT"), null);
    }

    /**
     * Create an aliased <code>ACCOUNT</code> table reference
     */
    public Account(String alias) {
        this(DSL.name(alias), ACCOUNT);
    }

    /**
     * Create an aliased <code>ACCOUNT</code> table reference
     */
    public Account(Name alias) {
        this(alias, ACCOUNT);
    }

    private Account(Name alias, Table<AccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private Account(Name alias, Table<AccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Account(Table<O> child, ForeignKey<O, AccountRecord> key) {
        super(child, key, ACCOUNT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRIMARY_KEY_E);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AccountRecord, Long> getIdentity() {
        return Keys.IDENTITY_ACCOUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AccountRecord> getPrimaryKey() {
        return Keys.CONSTRAINT_E;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AccountRecord>> getKeys() {
        return Arrays.<UniqueKey<AccountRecord>>asList(Keys.CONSTRAINT_E);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Account as(String alias) {
        return new Account(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Account as(Name alias) {
        return new Account(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(String name) {
        return new Account(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Account rename(Name name) {
        return new Account(name, null);
    }
}
